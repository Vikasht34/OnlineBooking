/*
Deployment script for Movie

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Movie"
:setvar DefaultFilePrefix "Movie"
:setvar DefaultDataPath "C:\Users\ax583e\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\ax583e\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Booking]...';


GO
CREATE TABLE [dbo].[Booking] (
    [Id]        INT      IDENTITY (1, 1) NOT NULL,
    [MovieId]   INT      NULL,
    [CinemaId]  INT      NULL,
    [UserId]    INT      NULL,
    [Seats]     INT      NULL,
    [MovieTime] TIME (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Cinema]...';


GO
CREATE TABLE [dbo].[Cinema] (
    [Id]      INT       IDENTITY (1, 1) NOT NULL,
    [Name]    CHAR (50) NULL,
    [Address] CHAR (50) NULL,
    [Seats]   INT       NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Movie]...';


GO
CREATE TABLE [dbo].[Movie] (
    [Id]          INT       IDENTITY (1, 1) NOT NULL,
    [MovieName]   CHAR (10) NULL,
    [MovieRating] INT       NULL,
    [Description] CHAR (50) NULL,
    [Photo]       CHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MovieShow]...';


GO
CREATE TABLE [dbo].[MovieShow] (
    [Id]       INT      IDENTITY (1, 1) NOT NULL,
    [MovieId]  INT      NULL,
    [CinemaId] INT      NULL,
    [ShowTime] TIME (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]   INT       NOT NULL,
    [Name] CHAR (10) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Booking_Movie]...';


GO
ALTER TABLE [dbo].[Booking]
    ADD CONSTRAINT [FK_Booking_Movie] FOREIGN KEY ([MovieId]) REFERENCES [dbo].[Movie] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Booking_Cinema]...';


GO
ALTER TABLE [dbo].[Booking]
    ADD CONSTRAINT [FK_Booking_Cinema] FOREIGN KEY ([CinemaId]) REFERENCES [dbo].[Cinema] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Booking_User]...';


GO
ALTER TABLE [dbo].[Booking]
    ADD CONSTRAINT [FK_Booking_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MovieShow_Movie]...';


GO
ALTER TABLE [dbo].[MovieShow]
    ADD CONSTRAINT [FK_MovieShow_Movie] FOREIGN KEY ([MovieId]) REFERENCES [dbo].[Movie] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MovieShow_Cinema]...';


GO
ALTER TABLE [dbo].[MovieShow]
    ADD CONSTRAINT [FK_MovieShow_Cinema] FOREIGN KEY ([CinemaId]) REFERENCES [dbo].[Cinema] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b462f8f3-b4fc-4399-a849-279fd329bad9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b462f8f3-b4fc-4399-a849-279fd329bad9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '15de0305-be5d-48ae-87eb-77b1145f2b34')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('15de0305-be5d-48ae-87eb-77b1145f2b34')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
print 'Mirgartion'
SET IDENTITY_INSERT Movie ON
INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (1,'Dabang',5,'Sallu Bhai Ki Movie','~/Pohoto/Dabang.png')
INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (2,'Dabang2',5,'Sallu Bhai Ki Movie','~/Pohoto/Dabang2.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (3,'Lutera',5,'Ranveer Bhai Ki Movie','~/Pohoto/Lutera.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (4,'Sajan',5,'Baba  Ki Movie','~/Pohoto/Sajan.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (5,'Dilwale',5,'Ajay Bhai Ki Movie','~/Pohoto/Dilwale.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (6,'DDLG',5,'Khan Bhai Ki Movie','~/Pohoto/DDLG.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (7,'Krantiveer',5,'Nana Ki Movie','~/Pohoto/Krantiveer.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (8,'EK hi Rasta',5,'Ajay Bhai Ki Movie','~/Pohoto/Ek.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (9,'Janwar',5,'Akhi Ki Movie','~/Pohoto/Janwar.png')
SET IDENTITY_INSERT Movie OFF


SET IDENTITY_INSERT Cinema ON

Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(1,'PVR','R.R.Nagar','45')
Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(2,'Inox','R.R.Nagar','45')
Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(3,'BigCinema','R.R.Nagar','45')
Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(4,'MTV','R.R.Nagar','45')

SET IDENTITY_INSERT Cinema OFF


SET IDENTITY_INSERT MovieShow ON

Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(1,1,1,'10:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(2,1,1,'12:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(3,2,1,'12:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(4,2,1,'2:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(5,3,1,'10:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(6,3,1,'12:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(7,4,1,'10:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(8,4,1,'12:30:00')

Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(9,1,2,'11:30:00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(10,1,2,'1:30:00')

SET IDENTITY_INSERT MovieShow OFF
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
