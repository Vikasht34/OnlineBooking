/*
Deployment script for MovieDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MovieDatabase"
:setvar DefaultFilePrefix "MovieDatabase"
:setvar DefaultDataPath "C:\Users\ax583e\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\ax583e\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key b462f8f3-b4fc-4399-a849-279fd329bad9 is skipped, element [dbo].[Movie].[Movie_Name] (SqlSimpleColumn) will not be renamed to MovieName';


GO
PRINT N'Rename refactoring operation with key 15de0305-be5d-48ae-87eb-77b1145f2b34 is skipped, element [dbo].[Movie].[M] (SqlSimpleColumn) will not be renamed to Description';


GO
PRINT N'Creating [dbo].[Booking]...';


GO
CREATE TABLE [dbo].[Booking] (
    [Id]        INT      NOT NULL,
    [MovieId]   INT      NULL,
    [CinemaId]  INT      NULL,
    [UserId]    INT      NULL,
    [Seats]     INT      NULL,
    [MovieTime] TIME (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Cinema]...';


GO
CREATE TABLE [dbo].[Cinema] (
    [Id]      INT       NOT NULL,
    [Name]    CHAR (50) NULL,
    [Address] CHAR (50) NULL,
    [Seats]   INT       NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Movie]...';


GO
CREATE TABLE [dbo].[Movie] (
    [Id]          INT       NOT NULL,
    [MovieName]   CHAR (10) NULL,
    [MovieRating] INT       NULL,
    [Description] CHAR (50) NULL,
    [Photo]       CHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MovieShow]...';


GO
CREATE TABLE [dbo].[MovieShow] (
    [Id]       INT      NOT NULL,
    [MovieId]  INT      NULL,
    [CinemaId] INT      NULL,
    [ShowTime] TIME (7) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]   INT       NOT NULL,
    [Name] CHAR (10) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_MovieShow_Movie]...';


GO
ALTER TABLE [dbo].[MovieShow] WITH NOCHECK
    ADD CONSTRAINT [FK_MovieShow_Movie] FOREIGN KEY ([MovieId]) REFERENCES [dbo].[Movie] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MovieShow_Cinema]...';


GO
ALTER TABLE [dbo].[MovieShow] WITH NOCHECK
    ADD CONSTRAINT [FK_MovieShow_Cinema] FOREIGN KEY ([CinemaId]) REFERENCES [dbo].[Cinema] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b462f8f3-b4fc-4399-a849-279fd329bad9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b462f8f3-b4fc-4399-a849-279fd329bad9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '15de0305-be5d-48ae-87eb-77b1145f2b34')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('15de0305-be5d-48ae-87eb-77b1145f2b34')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
print 'Mirgartion'
SET IDENTITY_INSERT Movie ON
INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (1,'Dabang',5,'Sallu Bhai Ki Movie','~/Pohoto/Dabang.png')
INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (2,'Dabang2',5,'Sallu Bhai Ki Movie','~/Pohoto/Dabang2.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (3,'Lutera',5,'Ranveer Bhai Ki Movie','~/Pohoto/Lutera.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (4,'Sajan',5,'Baba  Ki Movie','~/Pohoto/Sajan.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (5,'Dilwale',5,'Ajay Bhai Ki Movie','~/Pohoto/Dilwale.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (6,'DDLG',5,'Khan Bhai Ki Movie','~/Pohoto/DDLG.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (7,'Krantiveer',5,'Nana Ki Movie','~/Pohoto/Krantiveer.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (8,'EK hi Rasta',5,'Ajay Bhai Ki Movie','~/Pohoto/Ek.png')
--INSERT INTO DBO.Movie ([Id],[MovieName],[MovieRating],[Description],[Photo]) VALUES (9,'Janwar',5,'Akhi Ki Movie','~/Pohoto/Janwar.png')
SET IDENTITY_INSERT Movie OFF


SET IDENTITY_INSERT Cinema ON

Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(1,'PVR','R.R.Nagar','45')
Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(2,'Inox','R.R.Nagar','45')
Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(3,'BigCinema','R.R.Nagar','45')
Insert into Dbo.Cinema ([Id],[Name],[Address],[Seats]) Values(4,'MTV','R.R.Nagar','45')

SET IDENTITY_INSERT Cinema OFF


SET IDENTITY_INSERT MovieShow ON

Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(1,1,1,'10.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(2,1,1,'12.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(2,2,1,'12.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(3,2,1,'2.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(4,3,1,'10.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(5,3,1,'12.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(6,4,1,'10.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(7,4,1,'12.30.00')

Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(8,1,2,'11.30.00')
Insert into dbo.MovieShow([Id],[CinemaId],[MovieId],[ShowTime]) Values(9,1,2,'1.30.00')

SET IDENTITY_INSERT MovieShow OFF
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[MovieShow] WITH CHECK CHECK CONSTRAINT [FK_MovieShow_Movie];

ALTER TABLE [dbo].[MovieShow] WITH CHECK CHECK CONSTRAINT [FK_MovieShow_Cinema];


GO
PRINT N'Update complete.';


GO
